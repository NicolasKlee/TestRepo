#version 430 core

layout(std430, binding=0) buffer position_ssbo
{
	vec4 positions[];
};

layout(std430, binding=1) buffer velocity_ssbo
{
	vec4 velocity[];
};

layout(std430, binding=2) buffer angle_ssbo
{
	vec4 angle[];
};

#define PI 3.14159

uniform float deltaTime;
uniform vec3 emitterPos;
uniform float fullLifetime;
uniform int particleMortal;

uniform vec4 gravity; //xyz gravity Position, gravity Strength
uniform float gravityRange;
uniform int gravityFunc;

uniform int useTrajectory;
uniform int useDirectionGravity;
uniform int usePointGravity;
uniform int useChaoticSwarmMotion;

//for Flotation
uniform int useMovementHorizontalX;
uniform int useMovementHorizontalZ;
uniform int useMovementVertical;

layout(local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

void main(){

	//our data from Buffer
	uint gid = gl_GlobalInvocationID.x;
	vec4 pos = positions[gid]; //xyz position, lifetime
	vec4 vel = velocity[gid]; //xyz course, speed
	vec4 ang = angle[gid]; //xz angle, launch angle

	if (pos.w >0 || particleMortal == 0){
	
		/*	trajectory aka schiefer wurf, we assume that gravity direction is 0/-1/0. The scattering angle of the particle is influenced by theta, gravity and speed 
			If gravityStrengt is positive, the particles will fall, otherwise they will rise*/
		if(useTrajectory == 1){

			float lifetime = fullLifetime - pos.w;
			float phi = radians(ang.x); 	//transform from degree to radian
			float theta = radians(ang.y);

			float tempPos = vel.w * cos(theta) * lifetime; //horizontal position in 2d
			pos.x = tempPos * cos(phi) + emitterPos.x; //"transform" to 3d
			pos.z = tempPos * sin(phi) + emitterPos.z; //"transform" to 3d
			pos.y = vel.w * sin(theta) * lifetime + 0.5 * (-gravity.w) * pow(lifetime, 2.0) + emitterPos.y; //vertical position in 2d/3d

			if(ang.y == 0.0)
				pos.x = emitterPos.x + 1.0;
		}

		/*	DirectionGravity. Speed is constant, particles flying to a direction*/
		else if(useDirectionGravity == 1){

			pos.x += vel.x * vel.w * deltaTime; 
			pos.y += vel.y * vel.w * deltaTime; 
			pos.z += vel.z * vel.w * deltaTime;

			vel.x += gravity.x * gravity.w * deltaTime;
			vel.y += gravity.y * gravity.w * deltaTime;
			vel.z += gravity.z * gravity.w * deltaTime;

			if(vel.length != 0)
				vel = vec4(normalize(vel.xyz), vel.w);
		}
		
		/*	Gravity is intepreted as a position and not a direction. Function is for 0=linear, 1=const, 2=x^4, 3=cos
			If gravity is negative, then we have anti-gravitation*/
		else if(usePointGravity == 1){

			vec3 distance = gravity.xyz - pos.xyz;
			float distanceValue = length(distance);
			float distanceFactor = min(max(gravityRange - distanceValue,0.0)/ gravityRange, 1.0); //linear

			if(gravityFunc == 1)
						distanceFactor = ceil(distanceFactor); //constant
			else if(gravityFunc == 2)
						distanceFactor = pow(distanceFactor, 4.0); //x^4
			else if(gravityFunc == 3)
						distanceFactor = cos(distanceFactor*PI*2)+1.01; //cos

			pos.x += vel.x * vel.w * deltaTime;
			pos.y += vel.y * vel.w * deltaTime;
			pos.z += vel.z * vel.w * deltaTime;

			vel.x = (vel.x + distanceFactor * distance.x * gravity.w * deltaTime) / 1.01;
			vel.y = (vel.y + distanceFactor * distance.y * gravity.w * deltaTime) / 1.01;
			vel.z = (vel.z + distanceFactor * distance.z * gravity.w * deltaTime) / 1.01;
		}

		/*Particles fly in a circle/sphere*/
		else if(useChaoticSwarmMotion == 1){
			if(useMovementHorizontalX == 1)
				pos.x += sin(pos.w) * deltaTime / vel.w;
			if(useMovementVertical == 1)
				pos.y += cos(pos.w) * deltaTime / vel.w;
			if(useMovementHorizontalZ == 1)
				pos.z += cos(pos.w) * deltaTime / vel.w;
		}

		//set remainLifetime
		if(particleMortal == 1)
			pos.w -= deltaTime;
		else{
			pos.w -= deltaTime; //Warning: Breaks Numeric Domain!!
		}

		//sync
		positions[gid] = pos;
		velocity[gid] = vel;
	}
	else{
		pos = vec4(emitterPos, 0.0);
		positions[gid] = pos;
		vel = vec4(0.0, 0.0, 0.0, 0.0);
		velocity[gid] = vel;
	}
}